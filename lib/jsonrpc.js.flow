/* @flow */
import 'isomorphic-fetch';

const baseHeaders = {
  'Content-Type': 'application/json',
};

type JsonRpcRequest = {
    jsonrpc: string,
    method: string,
    params: any,
    id: number,
};

export default class JsonRpc {
    requestSeq: number;
    url: string;

    constructor(url: string) {
      this.requestSeq = 1;
      this.url = url;
    }

    /**
     * This call analyses JSON RPC response.
     * It returns promise which resolves whether 'result' field found
     * or reject in case 'error' field found.
     *
     * @returns {Promise}
     */
    call(method: string, params: any, headers: any): Promise<any> {
      return new Promise((resolve, reject) => {
        if (typeof method !== 'string') {
          reject(new Error(`RPC call method must be a string, got:
                    method: ${method},
                    params: ${JSON.stringify(params)},
                    headers: ${JSON.stringify(headers)}`));
          return;
        }
        this.post(method, params, headers).then((json) => {
          if (json.result || json.result === false || json.result === null) {
            resolve(json.result);
          } else if (json.error) {
            reject(json.error);
          } else {
            reject(new Error(`Unknown JSON RPC response: ${JSON.stringify(json)},
                     method: ${method},
                     params: ${JSON.stringify(params)}`));
          }
        }).catch(reject);
      });
    }

    post(name: string, params: any, headers: any): Promise<any> {
      const data = this.newRequest(name, params);
      const opt = {
        method: 'POST',
        headers: Object.assign(baseHeaders, headers),
        body: JSON.stringify(data),
      };

      return fetch(this.url, opt).then((response) => {
        if (response.status >= 400) {
          throw new Error(`Bad RPC response: ${response.status}`);
        }
        return response.json();
      });
    }

    newRequest(method: string, params: any): JsonRpcRequest {
      const request = {
        jsonrpc: '2.0',
        method,
        params,
        id: this.requestSeq,
      };
      this.requestSeq += 1;
      return request;
    }
}
